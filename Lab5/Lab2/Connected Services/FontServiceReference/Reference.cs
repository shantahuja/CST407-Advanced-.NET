//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Lab2.FontServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FavoriteFont", Namespace="http://schemas.datacontract.org/2004/07/Lab2")]
    [System.SerializableAttribute()]
    public partial class FavoriteFont : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FontNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsFavoriteField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comment {
            get {
                return this.CommentField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentField, value) != true)) {
                    this.CommentField = value;
                    this.RaisePropertyChanged("Comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FontName {
            get {
                return this.FontNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FontNameField, value) != true)) {
                    this.FontNameField = value;
                    this.RaisePropertyChanged("FontName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsFavorite {
            get {
                return this.IsFavoriteField;
            }
            set {
                if ((this.IsFavoriteField.Equals(value) != true)) {
                    this.IsFavoriteField = value;
                    this.RaisePropertyChanged("IsFavorite");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FontServiceReference.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetString", ReplyAction="http://tempuri.org/IService/GetStringResponse")]
        string GetString();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetString", ReplyAction="http://tempuri.org/IService/GetStringResponse")]
        System.Threading.Tasks.Task<string> GetStringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetString", ReplyAction="http://tempuri.org/IService/SetStringResponse")]
        void SetString(string set);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetString", ReplyAction="http://tempuri.org/IService/SetStringResponse")]
        System.Threading.Tasks.Task SetStringAsync(string set);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendFontData", ReplyAction="http://tempuri.org/IService/SendFontDataResponse")]
        void SendFontData(Lab2.FontServiceReference.FavoriteFont[] fontData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendFontData", ReplyAction="http://tempuri.org/IService/SendFontDataResponse")]
        System.Threading.Tasks.Task SendFontDataAsync(Lab2.FontServiceReference.FavoriteFont[] fontData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveFontData", ReplyAction="http://tempuri.org/IService/ReceiveFontDataResponse")]
        Lab2.FontServiceReference.FavoriteFont[] ReceiveFontData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveFontData", ReplyAction="http://tempuri.org/IService/ReceiveFontDataResponse")]
        System.Threading.Tasks.Task<Lab2.FontServiceReference.FavoriteFont[]> ReceiveFontDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Lab2.FontServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Lab2.FontServiceReference.IService>, Lab2.FontServiceReference.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetString() {
            return base.Channel.GetString();
        }
        
        public System.Threading.Tasks.Task<string> GetStringAsync() {
            return base.Channel.GetStringAsync();
        }
        
        public void SetString(string set) {
            base.Channel.SetString(set);
        }
        
        public System.Threading.Tasks.Task SetStringAsync(string set) {
            return base.Channel.SetStringAsync(set);
        }
        
        public void SendFontData(Lab2.FontServiceReference.FavoriteFont[] fontData) {
            base.Channel.SendFontData(fontData);
        }
        
        public System.Threading.Tasks.Task SendFontDataAsync(Lab2.FontServiceReference.FavoriteFont[] fontData) {
            return base.Channel.SendFontDataAsync(fontData);
        }
        
        public Lab2.FontServiceReference.FavoriteFont[] ReceiveFontData() {
            return base.Channel.ReceiveFontData();
        }
        
        public System.Threading.Tasks.Task<Lab2.FontServiceReference.FavoriteFont[]> ReceiveFontDataAsync() {
            return base.Channel.ReceiveFontDataAsync();
        }
    }
}
